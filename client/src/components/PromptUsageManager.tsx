import React, { useState } from 'react';
import { motion } from "framer-motion";
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Sparkles, 
  Brain, 
  MessageCircle, 
  Wand2, 
  Eye, 
  Lightbulb, 
  Heart, 
  Shield,
  Calendar,
  Activity,
  TrendingUp,
  X,
  Zap,
  Crown
} from 'lucide-react';
import { useToast } from "@/hooks/use-toast";

interface PromptUsageItem {
  id: string;
  type: 'journal_prompt_generation' | 'personalized_prompt_generation' | 'insight_generation' | 
        'therapy_response' | 'personality_analysis' | 'therapeutic_prompt' | 'coping_strategy' | 
        'kid_prompts' | 'photo_analysis' | 'video_analysis' | 'ai_chat' | 'ai_writing_assist';
  description: string;
  timestamp: string;
  tokensUsed: number;
  cost: number;
  feature: string;
}

interface PromptUsageStats {
  totalUsed: number;
  remaining: number;
  limit: number;
  currentPlan: string;
  usageByType: Record<string, number>;
  usageByDay: Array<{ date: string; count: number }>;
  topFeatures: Array<{ feature: string; count: number; percentage: number }>;
}

interface PromptUsageManagerProps {
  onClose: () => void;
}

export function PromptUsageManager({ onClose }: PromptUsageManagerProps) {
  const { toast } = useToast();

  // Fetch prompt usage data
  const { data: usageHistory, isLoading: historyLoading } = useQuery({
    queryKey: ["/api/prompts/history"],
  });

  const { data: usageStats, isLoading: statsLoading } = useQuery({
    queryKey: ["/api/prompts/stats"],
  });

  const history: PromptUsageItem[] = (usageHistory as any)?.history || [];
  const stats: PromptUsageStats = (usageStats as any) || {
    totalUsed: 40,
    remaining: 60,
    limit: 100,
    currentPlan: 'free',
    usageByType: {},
    usageByDay: [],
    topFeatures: []
  };

  const getPromptTypeIcon = (type: string) => {
    switch (type) {
      case 'journal_prompt_generation': return <Wand2 className="w-4 h-4" />;
      case 'personalized_prompt_generation': return <Sparkles className="w-4 h-4" />;
      case 'insight_generation': return <Brain className="w-4 h-4" />;
      case 'therapy_response': return <Heart className="w-4 h-4" />;
      case 'personality_analysis': return <Eye className="w-4 h-4" />;
      case 'therapeutic_prompt': return <Shield className="w-4 h-4" />;
      case 'coping_strategy': return <Lightbulb className="w-4 h-4" />;
      case 'photo_analysis': return <Eye className="w-4 h-4" />;
      case 'video_analysis': return <Activity className="w-4 h-4" />;
      case 'ai_chat': return <MessageCircle className="w-4 h-4" />;
      default: return <Sparkles className="w-4 h-4" />;
    }
  };

  const getPromptTypeColor = (type: string) => {
    switch (type) {
      case 'journal_prompt_generation': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'personalized_prompt_generation': return 'bg-pink-100 text-pink-800 border-pink-200';
      case 'insight_generation': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'therapy_response': return 'bg-red-100 text-red-800 border-red-200';
      case 'personality_analysis': return 'bg-indigo-100 text-indigo-800 border-indigo-200';
      case 'therapeutic_prompt': return 'bg-green-100 text-green-800 border-green-200';
      case 'coping_strategy': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'photo_analysis': return 'bg-cyan-100 text-cyan-800 border-cyan-200';
      case 'video_analysis': return 'bg-teal-100 text-teal-800 border-teal-200';
      case 'ai_chat': return 'bg-orange-100 text-orange-800 border-orange-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getPromptTypeName = (type: string) => {
    switch (type) {
      case 'journal_prompt_generation': return 'Journal Prompt';
      case 'personalized_prompt_generation': return 'Smart Prompt';
      case 'insight_generation': return 'AI Insight';
      case 'therapy_response': return 'AI Therapy';
      case 'personality_analysis': return 'Personality';
      case 'therapeutic_prompt': return 'Therapy Prompt';
      case 'coping_strategy': return 'Coping Strategy';
      case 'photo_analysis': return 'Photo Analysis';
      case 'video_analysis': return 'Video Analysis';
      case 'ai_chat': return 'AI Chat';
      case 'ai_writing_assist': return 'Writing Help';
      default: return 'AI Feature';
    }
  };

  const getFeatureDescription = (type: string) => {
    switch (type) {
      case 'journal_prompt_generation': 
        return 'Daily journal prompts generated by AI to inspire your writing';
      case 'personalized_prompt_generation': 
        return 'Smart prompts based on your previous journal entries';
      case 'insight_generation': 
        return 'AI analysis of your journal entries to provide insights';
      case 'therapy_response': 
        return 'Conversations with AI therapist Dr. Sofia';
      case 'personality_analysis': 
        return 'AI analysis of your writing patterns for personality insights';
      case 'therapeutic_prompt': 
        return 'Therapeutic journal prompts tailored to your emotional state';
      case 'coping_strategy': 
        return 'AI-generated coping strategies for specific situations';
      case 'photo_analysis': 
        return 'AI analysis of photos you upload to your journal';
      case 'video_analysis': 
        return 'AI analysis of videos you record or upload';
      case 'ai_chat': 
        return 'General AI chat conversations and assistance';
      case 'ai_writing_assist': 
        return 'AI help with writing, editing, and improving your journal entries';
      default: 
        return 'AI-powered feature usage';
    }
  };

  const usagePercentage = (stats.totalUsed / stats.limit) * 100;

  if (historyLoading || statsLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
        <span className="ml-2">Loading prompt usage data...</span>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      className="w-full max-w-6xl mx-auto p-6"
    >
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Sparkles className="w-8 h-8 text-purple-600" />
            AI Prompt Usage
          </h1>
          <p className="text-gray-600 mt-1">Track where your AI prompts are being used</p>
        </div>
        <Button onClick={onClose} variant="outline">
          <X className="w-4 h-4 mr-2" />
          Close
        </Button>
      </div>

      {/* Usage Overview */}
      <Card className="mb-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="w-5 h-5 text-purple-600" />
            Current Usage
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-lg font-medium">
                {stats.remaining} prompts remaining this month
              </span>
              <Badge variant="outline" className="text-lg px-3 py-1">
                {stats.totalUsed}/{stats.limit}
              </Badge>
            </div>
            <div className="w-full h-3 bg-gray-200 rounded-full overflow-hidden">
              <div 
                className="h-full bg-purple-600 transition-all duration-300"
                style={{ width: `${Math.min(usagePercentage, 100)}%` }}
              />
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4">
              {stats.topFeatures.slice(0, 4).map((feature) => (
                <div key={feature.feature} className="text-center p-3 bg-white rounded-lg border">
                  <div className="flex items-center justify-center mb-2">
                    {getPromptTypeIcon(feature.feature)}
                  </div>
                  <p className="text-sm font-medium">{getPromptTypeName(feature.feature)}</p>
                  <p className="text-xs text-gray-600">{feature.count} uses</p>
                  <p className="text-xs text-purple-600">{feature.percentage}%</p>
                </div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Feature Breakdown */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5" />
            AI Features & Costs
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4">
            {[
              { type: 'journal_prompt_generation', feature: 'Daily Journal Prompts', cost: 1 },
              { type: 'personalized_prompt_generation', feature: 'Smart Personalized Prompts', cost: 2 },
              { type: 'insight_generation', feature: 'Journal Entry Insights', cost: 2 },
              { type: 'therapy_response', feature: 'AI Therapy Chat (Dr. Sofia)', cost: 3 },
              { type: 'personality_analysis', feature: 'Personality Analysis', cost: 4 },
              { type: 'photo_analysis', feature: 'Photo Analysis (Tiered)', cost: '1-5' },
              { type: 'video_analysis', feature: 'Video Analysis (Tiered)', cost: '2-8' },
              { type: 'ai_chat', feature: 'General AI Chat', cost: 1 },
              { type: 'ai_writing_assist', feature: 'Writing Assistant', cost: 1 },
            ].map((item) => (
              <div key={item.type} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-3">
                  {getPromptTypeIcon(item.type)}
                  <div>
                    <h4 className="font-medium">{item.feature}</h4>
                    <p className="text-sm text-gray-600">{getFeatureDescription(item.type)}</p>
                  </div>
                </div>
                <Badge className={getPromptTypeColor(item.type)} variant="outline">
                  {item.cost} prompt{typeof item.cost === 'string' || item.cost > 1 ? 's' : ''}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Usage History */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            Recent Usage History
          </CardTitle>
        </CardHeader>
        <CardContent>
          {history.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <Sparkles className="w-12 h-12 mx-auto mb-2 opacity-50" />
              <p>No prompt usage history yet</p>
              <p className="text-sm">Start using AI features to see your usage here!</p>
            </div>
          ) : (
            <div className="space-y-3">
              {history.slice(0, 20).map((item) => (
                <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-3">
                    {getPromptTypeIcon(item.type)}
                    <div>
                      <h4 className="font-medium">{getPromptTypeName(item.type)}</h4>
                      <p className="text-sm text-gray-600">{item.description}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(item.timestamp).toLocaleString()}
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <Badge className={getPromptTypeColor(item.type)} variant="outline">
                      -{item.tokensUsed > 0 ? Math.ceil(item.tokensUsed / 100) : 1} prompt{Math.ceil(item.tokensUsed / 100) > 1 ? 's' : ''}
                    </Badge>
                    <p className="text-xs text-gray-500 mt-1">{item.feature}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Upgrade Prompt */}
      <Card className="mt-6 bg-gradient-to-br from-yellow-50 to-orange-50 border-yellow-200">
        <CardContent className="p-6 text-center">
          <Crown className="w-12 h-12 mx-auto mb-4 text-yellow-600" />
          <h3 className="text-xl font-bold mb-2">Need More Prompts?</h3>
          <p className="text-gray-600 mb-4">
            Upgrade to Premium for 1,000 prompts/month or Pro for unlimited prompts
          </p>
          <div className="flex gap-4 justify-center">
            <Button className="bg-purple-600 hover:bg-purple-700">
              <Zap className="w-4 h-4 mr-2" />
              Top Off Prompts ($2.99)
            </Button>
            <Button variant="outline" className="border-yellow-600 text-yellow-700">
              <Crown className="w-4 h-4 mr-2" />
              Upgrade Plan
            </Button>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}